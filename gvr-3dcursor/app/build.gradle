/*
 * Copyright 2016 Samsung Electronics Co., LTD
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: XmlValidator

if(file("../../common.gradle").exists()) {
    apply from: '../../common.gradle'
}
if(file("../../../../GearVRf-Demos/common.gradle").exists()) {
    apply from: '../../../../GearVRf-Demos/common.gradle'
}

allprojects {
    repositories {
        jcenter()
        flatDir {
            dirs '../../gearvrf-libs'
        }
    }
}

android {
    compileSdkVersion 21
    buildToolsVersion '23.0.3'

    defaultConfig {
        applicationId "org.gearvrf.io.cursor"
        minSdkVersion 19
        targetSdkVersion 19
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
        }
    }

    lintOptions {
        checkReleaseBuilds false
    }
    
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    rootProject.name + ".apk")
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile(name:'framework-debug', ext:'aar')
    compile(name:'3DCursorLibrary-debug', ext:'aar')
    compile(name:'GearWearIoDevice-debug', ext:'aar')
    compile(name:'gearwearlibrary-debug', ext:'aar')
    compile(name: 'google-vr-base', ext: 'aar')
    compile(name: 'google-vr-common', ext: 'aar')
    //_VENDOR_TODO_ add the device to cube-app here
    //compile project(':IODevices:io_template')
}

//TODO export plugin to jar
import javax.xml.XMLConstants
import javax.xml.transform.stream.StreamSource
import javax.xml.validation.SchemaFactory

class XmlValidator implements Plugin<Project> {
    void apply(Project project) {
        project.task('validateXml') << {
            println 'Validating settings.xml file'
            File xml = project.file('src/main/assets/settings.xml');
            File xsd = project.file('src/main/res/xml/settings_schema.xsd');

            def factory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);
            def schema = factory.newSchema(xsd);
            def validator = schema.newValidator();
            validator.validate(new StreamSource(xml));
        }
    }
}

preBuild.dependsOn validateXml
