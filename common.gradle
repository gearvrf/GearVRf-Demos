if (file("../../../extra_properties.gradle").exists()) {
    apply from: '../../../extra_properties.gradle'
}

if (file("../../../../extra_properties.gradle").exists()) {
    apply from: '../../../../extra_properties.gradle'
}

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "http://google.bintray.com/googlevr"
        }
        flatDir {
            dirs '../../GearVRf/GVRf/gearvrf-libs', '../../../GearVRf/GVRf/gearvrf-libs', '../../../../GearVRf/GVRf/gearvrf-libs'
        }
    }
}

android {
    compileSdkVersion 26

    buildTypes {
        debug {
            debuggable = true
            jniDebuggable = true
            resValue 'string', 'app_name', System.getProperty("appName")
        }
        release {
            signingConfig signingConfigs.debug
            resValue 'string', 'app_name', System.getProperty("appName")
        }
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 21
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            output.outputFileName = System.getProperty("appName") + ".apk"
        }
    }

    // ignore the x86 files from the google vr libraries
    packagingOptions {
        exclude 'lib/x86/libgvr.so'
        if (!project.hasProperty("ARM64")) {
            exclude 'lib/arm64-v8a/*.so'
        } else {
            exclude 'lib/armeabi-v7a/*.so'
        }
    }
}

task copyOculusSignature(type: Copy) {
    if (project.hasProperty("OCULUS_SIGS_DIRECTORY")) {
        copy {
            from project.property("OCULUS_SIGS_DIRECTORY")
            into 'src/main/assets'
            include 'oculussig_*'
        }
    }
}

preBuild {}.dependsOn copyOculusSignature

/*
To use local dependencies add the following line in a global gradle properties file
eg. ~/.gradle/gradle.properties:

useLocalDependencies=true

 */
ext.gearvrfVersion = '4.0.1-SNAPSHOT'
project.ext.daydreamVersion = '1.120.0'
project.ext.jomlVersion = "1.9.3-SNAPSHOT"
project.ext.gsonVersion = '2.8.2'

def hasBackend = false
if (project.hasProperty("backend_monoscopic") && project.property("backend_monoscopic")) {
    hasBackend = true
} else if (project.hasProperty("backend_daydream") && project.property("backend_daydream")) {
    hasBackend = true
} else if (project.hasProperty("backend_oculus") && project.property("backend_oculus")) {
    hasBackend = true
} else if (project.hasProperty("backend") && project.property("backend")) {
    hasBackend = true
}
if (!hasBackend) {
    project.ext.backend_oculus = true
    project.ext.backend_daydream = true
}

dependencies {
    compile "com.google.code.gson:gson:$gsonVersion"
    compile "org.joml:joml-android:${jomlVersion}"

    if (project.hasProperty("useLocalDependencies") && project.useLocalDependencies) {
        if (findProject(':framework')) {
            compile project(':framework')
        } else {
            debugCompile(name: 'framework-debug', ext: 'aar')
            releaseCompile(name: 'framework-release', ext: 'aar')
        }
    } else {
        compile "org.gearvrf:framework:$gearvrfVersion"
    }

    if (project.hasProperty("backend_monoscopic") && project.property("backend_monoscopic")) {
        if (project.hasProperty("useLocalDependencies") && project.useLocalDependencies) {
            if (findProject(':backend_monoscopic')) {
                compile project(':backend_monoscopic')
            } else {
                debugCompile(name: 'backend_monoscopic-debug', ext: 'aar')
                releaseCompile(name: 'backend_monoscopic-release', ext: 'aar')
            }
        } else {
            compile "org.gearvrf:backend_monoscopic:$gearvrfVersion"
        }
    }

    if (project.hasProperty("backend_daydream") && project.property("backend_daydream")) {
        if (project.hasProperty("useLocalDependencies") && project.useLocalDependencies) {
            if (findProject(':backend_daydream')) {
                compile project(':backend_daydream')
            } else {
                debugCompile(name: 'backend_daydream-debug', ext: 'aar')
                releaseCompile(name: 'backend_daydream-release', ext: 'aar')
            }
        } else {
            compile "org.gearvrf:backend_daydream:$gearvrfVersion"
        }
        compile "com.google.vr:sdk-base:${daydreamVersion}"
        compile "com.google.vr:sdk-controller:${daydreamVersion}"
    }

    if (project.hasProperty("backend_oculus") && project.property("backend_oculus")) {
        if (project.hasProperty("useLocalDependencies") && project.useLocalDependencies) {
            if (findProject(':backend_oculus')) {
                compile project(':backend_oculus')
            } else {
                debugCompile(name: 'backend_oculus-debug', ext: 'aar')
                releaseCompile(name: 'backend_oculus-release', ext: 'aar')
            }
        } else {
            compile "org.gearvrf:backend_oculus:$gearvrfVersion"
        }
    }

    if (project.hasProperty("backend") && project.property("backend")) {
        if (project.hasProperty("useLocalDependencies") && project.useLocalDependencies) {
            if (findProject(':backend')) {
                compile project(':backend')
            } else {
                debugCompile(name: 'backend-debug', ext: 'aar')
                releaseCompile(name: 'backend-release', ext: 'aar')
            }
        } else {
            throw new GradleException("backend not available from maven")
        }
    }
}
